"""autogenerated by genpy from dome/roof.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class roof(genpy.Message):
  _md5sum = "3c7f88a43e1d11ad4eea29bace6120b0"
  _type = "dome/roof"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 ubication
bool sensor1
bool sensor2
bool sensor3

"""
  __slots__ = ['ubication','sensor1','sensor2','sensor3']
  _slot_types = ['float32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ubication,sensor1,sensor2,sensor3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(roof, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ubication is None:
        self.ubication = 0.
      if self.sensor1 is None:
        self.sensor1 = False
      if self.sensor2 is None:
        self.sensor2 = False
      if self.sensor3 is None:
        self.sensor3 = False
    else:
      self.ubication = 0.
      self.sensor1 = False
      self.sensor2 = False
      self.sensor3 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_f3B.pack(_x.ubication, _x.sensor1, _x.sensor2, _x.sensor3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.ubication, _x.sensor1, _x.sensor2, _x.sensor3,) = _struct_f3B.unpack(str[start:end])
      self.sensor1 = bool(self.sensor1)
      self.sensor2 = bool(self.sensor2)
      self.sensor3 = bool(self.sensor3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_f3B.pack(_x.ubication, _x.sensor1, _x.sensor2, _x.sensor3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.ubication, _x.sensor1, _x.sensor2, _x.sensor3,) = _struct_f3B.unpack(str[start:end])
      self.sensor1 = bool(self.sensor1)
      self.sensor2 = bool(self.sensor2)
      self.sensor3 = bool(self.sensor3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f3B = struct.Struct("<f3B")
